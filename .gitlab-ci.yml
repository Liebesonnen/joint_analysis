# GitLab CI/CD configuration for the Joint Analysis package

stages:
  - lint
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  CONDA_PKGS_DIRS: "$CI_PROJECT_DIR/.conda-pkgs"

# Use a cache for pip and conda packages to speed up builds
cache:
  paths:
    - .pip-cache/
    - .conda-pkgs/

# Template for creating a conda environment
.conda_env_template: &conda_env
  before_script:
    - apt-get update -q -y
    - apt-get install -y wget
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    - bash miniconda.sh -b -p $CI_PROJECT_DIR/miniconda
    - export PATH="$CI_PROJECT_DIR/miniconda/bin:$PATH"
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda env create -f environment.yml
    - source activate joint-analysis-env

# Template for jobs that need X11 for visualization (headless)
.xvfb_template: &xvfb
  before_script:
    - apt-get update -q -y
    - apt-get install -y xvfb libgl1-mesa-glx
    - export DISPLAY=:99
    - Xvfb :99 -screen 0 1024x768x24 -ac &

# Create an environment.yml file if it doesn't match what's in requirements.txt
create_env_file:
  stage: .pre
  image: python:3.9
  script:
    - |
      if [ ! -f environment.yml ]; then
        echo "Creating environment.yml from requirements.txt"
        echo "name: joint-analysis-env" > environment.yml
        echo "channels:" >> environment.yml
        echo "  - conda-forge" >> environment.yml
        echo "  - defaults" >> environment.yml
        echo "dependencies:" >> environment.yml
        echo "  - python=3.9" >> environment.yml
        echo "  - pip" >> environment.yml
        echo "  - numpy>=1.20.0" >> environment.yml
        echo "  - scipy>=1.7.0" >> environment.yml
        echo "  - pytorch" >> environment.yml
        echo "  - pip:" >> environment.yml
        echo "    - polyscope>=1.3.0" >> environment.yml
        echo "    - dearpygui>=1.8.0" >> environment.yml
        echo "    - matplotlib>=3.5.0" >> environment.yml
      fi
  artifacts:
    paths:
      - environment.yml

lint:
  stage: lint
  image: python:3.9
  script:
    - pip install flake8 black isort
    - flake8 joint_analysis/ --count --select=E9,F63,F7,F82 --show-source --statistics
    - black --check joint_analysis/
    - isort --check-only --profile black joint_analysis/
  allow_failure: true

type_check:
  stage: lint
  image: python:3.9
  script:
    - pip install mypy types-setuptools
    - mypy joint_analysis/
  allow_failure: true

unit_tests:
  stage: test
  image: continuumio/miniconda3
  needs: ['create_env_file']
  <<: *conda_env
  script:
    - pip install pytest pytest-cov
    - if [ -d "tests" ]; then pytest --cov=joint_analysis tests/; else echo "tests not exsists"; fi
  allow_failure: true

visualization_tests:
  stage: test
  image: continuumio/miniconda3
  needs: ['create_env_file']
  <<: *conda_env
  <<: *xvfb
  script:
    - pip install pytest
    - pytest tests/test_visualization.py -v
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'
    - when: manual
  allow_failure: true

integration_tests:
  stage: test
  image: continuumio/miniconda3
  needs: ['create_env_file']
  <<: *conda_env
  script:
    - python -m joint_analysis.main --test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'
    - when: manual
  allow_failure: true

build_package:
  stage: build
  image: python:3.9
  script:
    - pip install build twine
    - python -m build
    - python -m twine check dist/*
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

docs:
  stage: build
  image: python:3.9
  script:
    - pip install -e .
    - pip install sphinx sphinx_rtd_theme
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/build/html
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'

pages:
  stage: deploy
  needs: ['docs']
  script:
    - mkdir -p public
    - cp -r docs/build/html/* public/
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'

pypi_deploy:
  stage: deploy
  needs: ['build_package']
  image: python:3.9
  script:
    - pip install twine
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --skip-existing dist/*
  rules:
    - if: '$CI_COMMIT_TAG'
  when: manual